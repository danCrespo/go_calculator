#!/usr/bin/env bash

programName=go-calculator

declare documentPath
documentPath="$(pwd)/.env"

if [[ -f "${documentPath}" ]]; then
  # shellcheck source=./.env
  source "${documentPath}"
  echo "document \"${documentPath}\" exists"
fi

build_binary() {
  set -x
  local dir output_path platforms

  dir=$1
  platforms=(
    linux/arm
    linux/amd64
    darwin/arm64
    darwin/amd64
    windows/arm
    windows/amd64
  )
  output_path=/opt/artifacts

  for platform in "${platforms[@]}"; do
    splitted="$(echo -e "${platform//\//'\n'}")"
    mapfile -t platform_split <<<"${splitted}"

    export GOOS="${platform_split[0]}"
    export GOARCH="${platform_split[1]}"
    compressed_filename="${programName}-${GOOS}-${GOARCH}"

    if [[ "${GOOS}" == windows ]]; then
      programName="${programName}.exe"
      compressed_filename="${compressed_filename}.tar.gz"

    else
      compressed_filename="${compressed_filename}.tar.gz"
    fi

    if ! go build -o "${output_path}/${programName}" "${dir}"; then
      echo -e "An error has occurred!. Aborting programm"
      exit 1

    else
      cd "${output_path}" || exit 0

      # if [[ "${GOOS}" == windows ]]; then
      #   zip -rq "${compressed_filename}" "${programName}"

      # else
      # fi
      tar -czvf "${compressed_filename}" "${programName}"

      rm -f "${programName}"
      cd "${OLDPWD}" || true
    fi

    unset GOOS
    unset GOARCH
  done
  ls -lA /opt/artifacts
}

create_relase() {

  local release_request
  declare -g release_id
  data=(
    "{\"tag_name\":\"${TAG}\",\"name\":\"${programName}@${TAG}\",\"body\":\"${programName} release for tag ${TAG}\",\"draft\":false,\"prerelease\":false,\"generate_release_notes\":true,\"make_latest\":\"true\"}"
  )

  release_request="$(
    curl -L \
      -X POST \
      -H "Accept: application/vnd.github+json" \
      -H "Authorization: Bearer ${GH_TOKEN}" \
      "https://api.github.com/repos/${REPOSITORY}/releases" \
      -d "${data[0]}" 2>/dev/null >&1
  )"

  release_id="$(echo "${release_request}" | grep '"id"' --max-count=1 | cut -d: -f2 | tr -d , | tr -d ' ')"
}

get_last_release() {
  declare -g last_release tag_name

  last_release="$(
    curl -L \
      -H "Accept: application/vnd.github+json" \
      -H "Authorization: Bearer ${GH_TOKEN}" \
      "https://api.github.com/repos/${REPOSITORY}/releases/latest" 2>/dev/null >&1
  )"

  message="$(echo "${last_release}" | grep 'message')" || ' '

  if [[ -n "${message}" ]] && [[ "$(echo "${message//\"/}" | cut -d: -f2 | tr -d , | tr -d ' ')" == 'NotFound' ]]; then
    tag_name=NotFound
  else
    tag_name="$(printf '%s\n' "${last_release}" | grep 'tag_name' | cut -d: -f2,3 | sed 's/[^\b],$//' | tr -d \")"
  fi
  echo "${tag_name}" >/dev/null
}

upload_release_asset() {
  mime=$1

  curl -L \
    -X POST \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer ${GH_TOKEN}" \
    -H "Accept: application/vnd.github+json" \
    -H "Content-Type: ${mime:='application/gzip'}" \
    "https://uploads.github.com/repos/${REPOSITORY}/releases/${release_id}/assets?name=${BINARY}" \
    --data-binary "@${BINARY}" 2>/dev/null >&1
}

recurse_dir() {
  for document in *; do

    if [[ -f "${document}" ]]; then
      mime_type="$(file --brief --mime-type "${document}")"

      if [[ "${mime_type}" == 'application/gzip' ]]; then
        echo "${document}"
        export BINARY="${document}"
        upload_release_asset "${mime_type}"
      fi

    fi
  done
}
