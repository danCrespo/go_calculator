#!/usr/bin/env bash

programName=go-calculator

declare filePath
filePath="$(pwd)/.env"

if [[ -f "${filePath}" ]]; then
  # shellcheck source=./.env
  source "${filePath}"
  echo "File \"${filePath}\" exists"
fi

build_binary() {
  set -x
  local dir os_type output_path gooss goarchs

  dir=$1
  os_type="$(uname -o)"
  gooss=(
    linux
    darwin
  )
  goarchs=(
    amd64
    arm64
  )

  case "${os_type}" in
    Darwin | GNU/Linux)
      output_path=/opt/artifacts
      ;;
    *)
      echo -e "Unsupported OS. supported OS includes just: Linux and Darwin"
      return 1
      ;;
  esac

  for os in "${gooss[@]}"; do
    export GOOS="${os}"

    for arc in "${goarchs[@]}"; do
      export GOARCH="${arc}"
      binaryName="${programName}_${os}_${arc}"
      go build -o "${output_path}/${binaryName}" -buildmode=exe "${dir}"

      cd "${output_path}" \
        && tar -czvf "${binaryName}.tar.gz" "${binaryName}"
      cd "${OLDPWD}" || true

      unset GOOS
    done
    unset GOARCH
  done
  ls -lA /opt/artifacts
}

create_relase() {

  local release_request
  declare -g release_id
  data=(
    "{\"tag_name\":\"${TAG}\",\"name\":\"${programName}@${TAG}\",\"body\":\"${programName} release for tag ${TAG}\",\"draft\":false,\"prerelease\":false,\"generate_release_notes\":true,\"make_latest\":\"true\"}"
  )

  release_request="$(
    curl -L \
      -X POST \
      -H "Accept: application/vnd.github+json" \
      -H "Authorization: Bearer ${GH_TOKEN}" \
      "https://api.github.com/repos/${REPOSITORY}/releases" \
      -d "${data[0]}" 2>/dev/null >&1
  )"

  release_id="$(echo "${release_request}" | grep '"id"' --max-count=1 | cut -d: -f2 | tr -d , | tr -d ' ')"
}

get_last_release() {
  declare -g last_release tag_name

  last_release="$(
    curl -L \
      -H "Accept: application/vnd.github+json" \
      -H "Authorization: Bearer ${GH_TOKEN}" \
      "https://api.github.com/repos/${REPOSITORY}/releases/latest" 2>/dev/null >&1
  )"

  [[ -z "${last_release}" ]] && exit 1

  tag_name="$(printf '%s\n' "${last_release}" | grep 'tag_name' | cut -d: -f2,3 | sed 's/[^\b],$//' | tr -d \")"
  echo "${last_release}"
  echo "${tag_name}"
}

upload_release_asset() {
  curl -L \
    -X POST \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer ${GH_TOKEN}" \
    -H "Accept: application/vnd.github+json" \
    -H "Content-Type: application/gzip" \
    "https://uploads.github.com/repos/${REPOSITORY}/releases/${release_id}/assets?name=${BINARY}" \
    --data-binary "@${BINARY}" 2>/dev/null >&1
}
